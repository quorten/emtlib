This file was deleted, so this is just a summary.

1. Examine the build process
2. Look at main file and go down
3. Document dependency hierarchy
4. Write down
5. You're done

The "restored" file content begins below
----------------------------------------------------------------------

"Getting to know" really large source code distributions

Often times with large open source programs, there is so much code
that I do not know where to start.  So in order to solve this problem,
I developed a process for understanding large source code
distributions.

The first order of business is to look at how the program is built for
my platform only.  Usually, open source programs will use a utility to
make porting the program to other platforms more effective, and I will
have to find out how that special utility works.  Two that I know
about are Autoconf and Scons.  If the program just uses MSVC or
makefiles, then I am good to go.

Second, I will have to use any information possible from the previous
mentioned utilities, such as config.h generated by Autoconf, to filter
down the source code to only what is needed for my platform.

Third, I should then look for the main source file and traverse the
dependency hierarchy.  In this process, I should rate modules by
superiority and locate code attributes of modules.  Rating modules by
superiority means marking which modules can serve their ultimate
purpose without the others, and code attributes are general feature
specifications which you would probably see in a TODO list.  After I
do this, I can easily remove features as I need.

NOTE: Knowing the high level organization is important for starters.
Although an experienced programmer who worked on a software project
extensively has a memorized mental map of the program, a beginner is
completely clueless on this knowledge and needs supporting
documentation to learn about that.  However, once that obsticle is out
of the way, the only true way to understand the source code is to read
and understand the code base that they will be working with.  No
auxiliary documentation can substitute that.
